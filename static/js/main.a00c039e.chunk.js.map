{"version":3,"sources":["components/Utility/MenuItem.js","components/Utility/Menu.js","assets/images/backgroundImage.gif","assets/images/starboy.jfif","components/Utility/CommonApplications.js","components/Screen.js","components/TouchPad.js","assets/songs/starboy.mp3","components/App.js","index.js"],"names":["MenuItem","props","item","content","style","selected","backgroundColor","color","className","Menu","menuItems","heading","screen","map","index","activeMenuIndex","marginBottom","CommonApplication","appName","currTime","totalTime","formatTime","timeSec","min","Math","floor","seconds","src","StaboyImage","alt","type","disabled","value","max","image","console","log","Screen","stateProp","activeScreen","menuList","subMenuList","activeSubMenuIndex","backgroundImage","TouchPad","musicIcon","this","onMouseStart","onMouseEnd","changeScreenHandler","musicState","onClick","musicToggle","onMouseDown","onMouseUp","onMouseOver","e","preventDefault","React","Component","App","musicPlayPauseHandler","audio","paused","play","pause","setState","mouseDownHandler","newMenuIndex","menuLength","lastMenuIndex","menu","document","querySelector","state","length","zt","bind","totalAngle","detail","distanceFromOrigin","prevState","mouseOutHandler","unbind","changeScreensHandler","button","selectedMenuItem","selectedSubMenuItem","ZingTouch","Region","body","Audio","StarBoyMP3","setInterval","currentTime","duration","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a00c039e.chunk.js","sourcesContent":["\r\n\r\n// Menu Items are shown inside the Menu Component\r\nconst MenuItem = props => {\r\n\r\n    let { item, selected } = props\r\n\r\n    let content = null;\r\n\r\n    if(item){\r\n        content = item;\r\n    }\r\n    let style=null;\r\n\r\n    // if the item is selected\r\n    if(selected){\r\n        style={\r\n            backgroundColor: 'black',\r\n            color: 'white'\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"MenuItem\" style={style}>\r\n            <p> {content} </p>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default MenuItem;","import MenuItem from './MenuItem';\r\n\r\n\r\n// Menu Component shown only when activeScreen is Menu\r\nconst Menu = props => {\r\n\r\n    let menuItems = \"loading\";\r\n    let {screen} = props;\r\n    let heading = null\r\n    if(screen === 'Menu'){\r\n        heading = \"IPOD.js\"\r\n    }else{\r\n        heading = \"Music\"\r\n    }\r\n    \r\n\r\n    // Menu items are rendered with another component\r\n    // content is loaded after props have been received\r\n    if(props.menuItems){\r\n        menuItems = props.menuItems.map((item, index)=>{\r\n            if(index === props.activeMenuIndex){\r\n                return <MenuItem item={item} key={index} selected={true}></MenuItem>\r\n            }\r\n            return <MenuItem item={item} key={index}></MenuItem>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"Menu\">\r\n            <div className=\"header-div\" style={{marginBottom:\"1rem\"}}>\r\n                {heading}\r\n            </div>\r\n            {menuItems}        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu;","export default __webpack_public_path__ + \"static/media/backgroundImage.8c81f39a.gif\";","export default __webpack_public_path__ + \"static/media/starboy.54372525.jfif\";","\r\nimport StaboyImage from '../../assets/images/starboy.jfif'\r\n\r\n\r\n// The end application like browser, settings, artists(menu), music etc\r\nconst CommonApplication = (props) => {\r\n\r\n    let content = 'Loading'\r\n\r\n    const { appName , currTime , totalTime } = props\r\n    \r\n    const formatTime = (timeSec) => {\r\n\r\n        let min = Math.floor(timeSec / 60)\r\n        let seconds = Math.floor(timeSec % 60)\r\n\r\n        if(seconds/10 < 1){\r\n            seconds = '0' + seconds\r\n        }\r\n\r\n        return min + '.' + seconds\r\n        \r\n    }\r\n\r\n    if(appName === \"Music\"){\r\n        content = (\r\n            \r\n            <div className = \"Music\">\r\n                <div className=\"music-header\">\r\n                    <img src={StaboyImage} alt=\"StarBoy Cover\"></img>\r\n                </div>\r\n                <div className=\"music-info\">\r\n                    <p>Starboy by The WeekEnd</p>\r\n                </div>\r\n                <div className=\"timeline\">\r\n                    <p>{formatTime(currTime)}</p>\r\n                    <input type=\"range\" disabled value={currTime} max={1000}></input>\r\n                    <p>{formatTime(totalTime)}</p>\r\n                </div>\r\n                \r\n                \r\n            </div>\r\n        )\r\n    }else{\r\n        let image = null;\r\n        console.log(appName)\r\n        if(appName === 'Browser'){\r\n            image = <i className=\"fab fa-firefox-browser\"></i>\r\n        }else if(appName === 'Settings'){\r\n            image = <i className=\"fas fa-cogs\"></i>\r\n        }else if(appName === 'Messages'){\r\n            image = <i className=\"fas fa-envelope-open\"></i>\r\n        }\r\n\r\n        content = (\r\n            <div className=\"Common\">\r\n                <p>{appName}</p>\r\n                {image}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"CommonApplication\">\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommonApplication;","import Menu from './Utility/Menu';\r\nimport backgroundImage from '../assets/images/backgroundImage.gif'\r\n\r\nimport CommonApplication from './Utility/CommonApplications'; \r\n\r\n\r\n// Screen Component does not handles any touch events\r\nconst Screen = (props) => {\r\n\r\n    const { activeScreen , menuList , activeMenuIndex , subMenuList , activeSubMenuIndex } = props.stateProp;\r\n    \r\n    const { currTime , totalTime } = props\r\n\r\n    let content = null;\r\n\r\n    \r\n    // display content on basis of the activeScreen prop\r\n    if(activeScreen === \"Menu\"){\r\n        content = <Menu screen={activeScreen} menuItems={menuList} activeMenuIndex={activeMenuIndex}  />\r\n        \r\n    }else if(activeScreen === \"SubMenu\"){\r\n        content = <Menu menuItems={subMenuList} activeMenuIndex={activeSubMenuIndex} />\r\n    }else{\r\n        // This is the application meant to open by the user\r\n        // like messages, browser, music etc\r\n        content = <CommonApplication currTime={currTime} totalTime={totalTime} appName = {activeScreen} />\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"Screen\" style={{backgroundImage : \"url(\" + backgroundImage + \")\"}}>\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Screen;","import React from 'react';\r\n\r\n\r\n// Lower Component which handles the touch events\r\n// stateless\r\nclass TouchPad extends React.Component{\r\n\r\n    render(){\r\n\r\n        const { onMouseStart , onMouseEnd  , changeScreenHandler , musicState } = this.props\r\n\r\n        let musicIcon;\r\n        if (musicState){\r\n            musicIcon = <i className=\"fas fa-pause-circle\" onClick={this.props.musicToggle}></i>\r\n        }else{\r\n            musicIcon = <i className=\"fas fa-play-circle\" onClick={this.props.musicToggle}></i>\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"TouchPad\">\r\n                <div className=\"touch-element\" onMouseDown={onMouseStart} onMouseUp={onMouseEnd}>\r\n                    <i className=\"fas fa-chevron-circle-down\" onClick={()=>changeScreenHandler('menu')}></i>\r\n                    <i className=\"fas fa-step-forward\"></i>\r\n                    <i className=\"fas fa-step-backward\"></i>\r\n                    {musicIcon}\r\n                </div>\r\n                <div className=\"center-button\" onMouseOver={(e)=>e.preventDefault()} onMouseDown={(e)=>e.preventDefault()} onClick={()=>{changeScreenHandler('center')}}>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TouchPad;","export default __webpack_public_path__ + \"static/media/starboy.90da2354.mp3\";","import Screen from './Screen';\r\nimport TouchPad from './TouchPad'\r\nimport React from 'react';\r\nimport ZingTouch from 'zingtouch';\r\n\r\n// song import\r\nimport StarBoyMP3 from '../assets/songs/starboy.mp3'\r\n\r\n\r\n// About The Application\r\n// I am writing it here for better understanding of this app works \r\n// The Top button is Menu Button (responsible for going back)\r\n// The center button is like a select button and takes tyou inside of selected application\r\n// The options can be explored by rotate gesture on the rotate bar(black disk)\r\n// Songs can be played and paused from anyscreen\r\n// as song is attacked to the main app component\r\n// Thanks for reading \r\n\r\n\r\n\r\n\r\n// This is the only stateful component in this application.\r\nclass App extends React.Component{\r\n\r\n  // constructor method \r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      activeScreen : 'Menu',\r\n      menuList: [\r\n        'Music',\r\n        'Settings',\r\n        'Browser',\r\n        'Messages'\r\n      ],\r\n      subMenuList: [\r\n        'All Music',\r\n        'Artists',\r\n        'Shuffle'\r\n      ],\r\n      activeMenuIndex:0,\r\n      activeSubMenuIndex: 0,\r\n      musicState: false,\r\n      currTime: 0,\r\n      totalTime: 0,\r\n    }\r\n\r\n    // Initializing ZingTouch Region\r\n    this.zt = new ZingTouch.Region(document.body);\r\n\r\n    // Setting Audio\r\n    // Audio in this file to control music from anywhere in the application\r\n    this.audio = new Audio(StarBoyMP3);\r\n\r\n    // check for current time every second and update on the UI\r\n    setInterval( ()=> {\r\n      const currentTime = this.audio.currentTime\r\n      \r\n      if(currentTime !== this.state.currTime){\r\n        this.setState({\r\n          currTime: currentTime \r\n        })\r\n      }\r\n      \r\n      \r\n      // console.log(this.state.currTime, \"A\")\r\n    } , 1000)\r\n    \r\n  }\r\n\r\n  \r\n\r\n  // toggle Music Play Pause State\r\n  musicPlayPauseHandler = (e) => {\r\n    this.audio.paused ? this.audio.play() : this.audio.pause() ;\r\n    this.audio.paused ? this.setState({musicState: false}) :this.setState({musicState: true})\r\n  } \r\n  \r\n\r\n  // when clicked on the touchpad for rotation\r\n  mouseDownHandler=(e)=>{\r\n    let menu = document.querySelector('.touch-element');\r\n    let angle = 30;\r\n    let newMenuIndex, menuLength, lastMenuIndex;\r\n    \r\n    // rotation on basis of on which menu is it carried on\r\n    // basically 2 menus are recorder 'Menu' and 'SubMenu'\r\n    if(this.state.activeScreen === 'Menu'){\r\n      lastMenuIndex = this.state.activeMenuIndex\r\n      menuLength = this.state.menuList.length\r\n    }else if(this.state.activeScreen === \"SubMenu\"){\r\n      lastMenuIndex = this.state.activeSubMenuIndex\r\n      menuLength = this.state.subMenuList.length \r\n    }\r\n    \r\n\r\n    // binding the rotation eventHandler\r\n    this.zt.bind(menu, 'rotate', (e) => {\r\n\r\n        // calculate total angle\r\n        let totalAngle = e.detail.distanceFromOrigin;\r\n        \r\n        // get the index of the latest menu item that should be selected on the screen w.r.t the last selected item when mouse is put down\r\n        // negative sign because the rotation is opposite to the conventional one\r\n        newMenuIndex = (-1) * Math.floor(totalAngle / angle) + lastMenuIndex;\r\n\r\n        // find modulus to length of list\r\n        newMenuIndex = newMenuIndex % menuLength;\r\n        \r\n        // if less than zero adjust according to behavour of the mod operator\r\n        if(newMenuIndex < 0){\r\n          newMenuIndex = menuLength + newMenuIndex\r\n        }\r\n        \r\n\r\n        // set state for the selected menu item to reflet in UI (on basis of 'Menu' or 'SubMenu')\r\n        if(this.state.activeScreen === \"Menu\"){\r\n          this.setState(prevState=>{\r\n            return {\r\n              activeMenuIndex: newMenuIndex\r\n            }\r\n          })\r\n        }else if(this.state.activeScreen === \"SubMenu\"){\r\n          this.setState(prevState=>{\r\n            return {\r\n              activeSubMenuIndex: newMenuIndex\r\n            }\r\n          })\r\n        }\r\n        \r\n      \r\n        \r\n    });\r\n  }\r\n\r\n  // unbinding the rotate eventHandler on mouseUp to prevent from eventHandler to take place on the center button\r\n  mouseOutHandler=(e)=>{\r\n    let menu = document.querySelector('.touch-element');\r\n    \r\n    this.zt.unbind(menu, 'rotate');\r\n  }\r\n\r\n\r\n  \r\n\r\n  // manages how the button clicks (menu button on top and center button are handled)\r\n  // the button clicked is passed to the function\r\n  changeScreensHandler = (button) => {\r\n\r\n    \r\n    let activeScreen = this.state.activeScreen\r\n    let selectedMenuItem = this.state.menuList[this.state.activeMenuIndex]\r\n    let selectedSubMenuItem = this.state.subMenuList[this.state.activeSubMenuIndex]\r\n\r\n    // if center button clicked\r\n    // managed on basis of which screen is currently active\r\n    if(button === 'center'){\r\n      if(activeScreen === 'Menu'){\r\n        if(selectedMenuItem === 'Music'){\r\n          \r\n          // set state to subMenu for music\r\n          this.setState({activeScreen:'SubMenu'})\r\n        }else{\r\n          \r\n          this.setState({\r\n            activeScreen: selectedMenuItem\r\n          })\r\n        }\r\n      }else if(activeScreen === 'SubMenu'){\r\n          // respond only if selected item is All Music\r\n          if(selectedSubMenuItem === 'All Music'){\r\n            this.setState({\r\n              activeScreen: 'Music'\r\n            })\r\n          }else{\r\n            this.setState({\r\n              activeScreen: selectedSubMenuItem\r\n            })\r\n          }\r\n      }\r\n      // Menu Button Clicked\r\n    }else if(button === 'menu'){\r\n      if(activeScreen === 'Menu'){\r\n        console.log(\"Menu on Menu\");\r\n\r\n      }else if(activeScreen === 'SubMenu'){\r\n        this.setState({activeScreen: 'Menu'})\r\n\r\n      }else if(activeScreen === 'Music' || activeScreen === 'Artists' || activeScreen === 'Shuffle'){\r\n        this.setState({activeScreen: 'SubMenu'})\r\n      }else{\r\n        this.setState({activeScreen:'Menu'})\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  render(){\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <Screen currTime={this.state.currTime} totalTime={this.audio.duration}  stateProp = {this.state} />\r\n        \r\n        <TouchPad musicState={this.state.musicState} musicToggle={this.musicPlayPauseHandler} onMouseStart={this.mouseDownHandler} onMouseEnd={this.mouseOutHandler} changeScreenHandler={this.changeScreensHandler}/>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}